# This is a basic workflow to help you get started with Actions

name: Routine Updates Send Job

# Controls when the workflow will run
on:
    # Triggers the workflow on push or pull request events but only for the main branch
    schedule:
        - cron: 00 4 * * *

    # Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:
        inputs:
            send:
                description: 'True to send updates on manual trigger'
                required: true
                type: choice
                options:
                    - Send
                    - Do not send

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
    # This workflow contains a single job called "build"
    send:
        # The type of runner that the job will run on
        runs-on: ubuntu-latest

        # Steps represent a sequence of tasks that will be executed as part of the job
        steps:
            - name: Fetch API Data ðŸ“¦
              uses: JamesIves/fetch-api-data-action@v2.2.4
              if: ${{ (inputs.send || 'Send') == 'Send' }}
              with:
                  set-output: false
                  endpoint: ${{ secrets.API_URL }}
                  configuration: '{ "method": "GET", "headers": {"Authorization": "Bearer ${{ secrets.API_TOKEN }}"} }'
            - name: Fetch fake API Data ðŸ“¦
              uses: JamesIves/fetch-api-data-action@v2.2.4
              if: ${{ (inputs.send || 'Send') != 'Send' }}
              with: 
                endpoint: $FAKE_UPDATE_API
                configuration: '{ "method": "GET"}'
                set-output: false
            - name: Download jq package
              run: sudo apt install -y jq
            - name: Read & publish response
              run: |
                cat "fetch-api-data-action/data.json"
                S=`jq -r '.success' "fetch-api-data-action/data.json"`
                M=`jq -r '.description' "fetch-api-data-action/data.json"`
                D=`jq -r '.time' "fetch-api-data-action/data.json"`
                if $S; then echo '# Success :heavy_check_mark:'; else echo '# Failure :x:'; fi >> $GITHUB_STEP_SUMMARY
                echo "$M on $(date -d @$(($D/1000)) '+%d %B, %Y at %I:%M:%S %p %Z (%:z UTC)')" >> $GITHUB_STEP_SUMMARY
            - name: Warn for a fake response
              if: ${{ (inputs.send || 'Send') != 'Send' }}
              run: echo ":warning:This is a fake response" >> $GITHUB_STEP_SUMMARY
                
